// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.69.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_Index> api2wire_box_autoadd_index(Index raw) {
    final ptr = inner.new_box_autoadd_index_0();
    _api_fill_to_wire_index(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_f64_array_2(F64Array2 raw) {
    final ans = inner.new_float_64_list_0(2);
    ans.ref.ptr.asTypedList(2).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_index> api2wire_list_index(List<Index> raw) {
    final ans = inner.new_list_index_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_index(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_index(
      Index apiObj, ffi.Pointer<wire_Index> wireObj) {
    _api_fill_to_wire_index(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_index(Index apiObj, wire_Index wireObj) {
    wireObj.index = api2wire_usize(apiObj.index);
    wireObj.generation = api2wire_u64(apiObj.generation);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_say_hello_async(
    int port_,
  ) {
    return _wire_say_hello_async(
      port_,
    );
  }

  late final _wire_say_hello_asyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_say_hello_async');
  late final _wire_say_hello_async =
      _wire_say_hello_asyncPtr.asFunction<void Function(int)>();

  void wire_morton_codes_async(
    int port_,
    ffi.Pointer<wire_float_64_list> xs,
    ffi.Pointer<wire_float_64_list> ys,
  ) {
    return _wire_morton_codes_async(
      port_,
      xs,
      ys,
    );
  }

  late final _wire_morton_codes_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_float_64_list>,
              ffi.Pointer<wire_float_64_list>)>>('wire_morton_codes_async');
  late final _wire_morton_codes_async = _wire_morton_codes_asyncPtr.asFunction<
      void Function(int, ffi.Pointer<wire_float_64_list>,
          ffi.Pointer<wire_float_64_list>)>();

  WireSyncReturn wire_morton_codes(
    ffi.Pointer<wire_float_64_list> xs,
    ffi.Pointer<wire_float_64_list> ys,
  ) {
    return _wire_morton_codes(
      xs,
      ys,
    );
  }

  late final _wire_morton_codesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_float_64_list>,
              ffi.Pointer<wire_float_64_list>)>>('wire_morton_codes');
  late final _wire_morton_codes = _wire_morton_codesPtr.asFunction<
      WireSyncReturn Function(
          ffi.Pointer<wire_float_64_list>, ffi.Pointer<wire_float_64_list>)>();

  WireSyncReturn wire_aabb_new(
    double min_x,
    double min_y,
    double max_x,
    double max_y,
  ) {
    return _wire_aabb_new(
      min_x,
      min_y,
      max_x,
      max_y,
    );
  }

  late final _wire_aabb_newPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('wire_aabb_new');
  late final _wire_aabb_new = _wire_aabb_newPtr
      .asFunction<WireSyncReturn Function(double, double, double, double)>();

  WireSyncReturn wire_aabb_new_bulk(
    ffi.Pointer<wire_float_64_list> points,
  ) {
    return _wire_aabb_new_bulk(
      points,
    );
  }

  late final _wire_aabb_new_bulkPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_float_64_list>)>>('wire_aabb_new_bulk');
  late final _wire_aabb_new_bulk = _wire_aabb_new_bulkPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_float_64_list>)>();

  WireSyncReturn wire_aabb_drop_bulk(
    ffi.Pointer<wire_list_index> aabb_ids,
  ) {
    return _wire_aabb_drop_bulk(
      aabb_ids,
    );
  }

  late final _wire_aabb_drop_bulkPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_list_index>)>>('wire_aabb_drop_bulk');
  late final _wire_aabb_drop_bulk = _wire_aabb_drop_bulkPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_list_index>)>();

  WireSyncReturn wire_aabb_min(
    ffi.Pointer<wire_Index> aabb_id,
  ) {
    return _wire_aabb_min(
      aabb_id,
    );
  }

  late final _wire_aabb_minPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_aabb_min');
  late final _wire_aabb_min = _wire_aabb_minPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_aabb_max(
    ffi.Pointer<wire_Index> aabb_id,
  ) {
    return _wire_aabb_max(
      aabb_id,
    );
  }

  late final _wire_aabb_maxPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_aabb_max');
  late final _wire_aabb_max = _wire_aabb_maxPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_aabb_size(
    ffi.Pointer<wire_Index> aabb_id,
  ) {
    return _wire_aabb_size(
      aabb_id,
    );
  }

  late final _wire_aabb_sizePtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_aabb_size');
  late final _wire_aabb_size = _wire_aabb_sizePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_aabb_center(
    ffi.Pointer<wire_Index> aabb_id,
  ) {
    return _wire_aabb_center(
      aabb_id,
    );
  }

  late final _wire_aabb_centerPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_aabb_center');
  late final _wire_aabb_center = _wire_aabb_centerPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_aabb_intersects_aabb(
    ffi.Pointer<wire_Index> aabb_left_id,
    ffi.Pointer<wire_Index> aabb_right_id,
  ) {
    return _wire_aabb_intersects_aabb(
      aabb_left_id,
      aabb_right_id,
    );
  }

  late final _wire_aabb_intersects_aabbPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Index>,
              ffi.Pointer<wire_Index>)>>('wire_aabb_intersects_aabb');
  late final _wire_aabb_intersects_aabb =
      _wire_aabb_intersects_aabbPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Index>, ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_aabb_contains_point(
    ffi.Pointer<wire_Index> aabb_id,
    ffi.Pointer<wire_float_64_list> point,
  ) {
    return _wire_aabb_contains_point(
      aabb_id,
      point,
    );
  }

  late final _wire_aabb_contains_pointPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Index>,
              ffi.Pointer<wire_float_64_list>)>>('wire_aabb_contains_point');
  late final _wire_aabb_contains_point =
      _wire_aabb_contains_pointPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Index>, ffi.Pointer<wire_float_64_list>)>();

  WireSyncReturn wire_aabb_contains_aabb(
    ffi.Pointer<wire_Index> aabb_left_id,
    ffi.Pointer<wire_Index> aabb_right_id,
  ) {
    return _wire_aabb_contains_aabb(
      aabb_left_id,
      aabb_right_id,
    );
  }

  late final _wire_aabb_contains_aabbPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Index>,
              ffi.Pointer<wire_Index>)>>('wire_aabb_contains_aabb');
  late final _wire_aabb_contains_aabb = _wire_aabb_contains_aabbPtr.asFunction<
      WireSyncReturn Function(
          ffi.Pointer<wire_Index>, ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_aabb_merge(
    ffi.Pointer<wire_Index> aabb_left_id,
    ffi.Pointer<wire_Index> aabb_right_id,
  ) {
    return _wire_aabb_merge(
      aabb_left_id,
      aabb_right_id,
    );
  }

  late final _wire_aabb_mergePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Index>,
              ffi.Pointer<wire_Index>)>>('wire_aabb_merge');
  late final _wire_aabb_merge = _wire_aabb_mergePtr.asFunction<
      WireSyncReturn Function(
          ffi.Pointer<wire_Index>, ffi.Pointer<wire_Index>)>();

  void wire_aabb_merge_with(
    int port_,
    ffi.Pointer<wire_Index> aabb,
    ffi.Pointer<wire_Index> other,
  ) {
    return _wire_aabb_merge_with(
      port_,
      aabb,
      other,
    );
  }

  late final _wire_aabb_merge_withPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Index>,
              ffi.Pointer<wire_Index>)>>('wire_aabb_merge_with');
  late final _wire_aabb_merge_with = _wire_aabb_merge_withPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Index>, ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_bvh_new(
    ffi.Pointer<wire_list_index> aabbs,
  ) {
    return _wire_bvh_new(
      aabbs,
    );
  }

  late final _wire_bvh_newPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_list_index>)>>('wire_bvh_new');
  late final _wire_bvh_new = _wire_bvh_newPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_list_index>)>();

  void wire_bvh_new_async(
    int port_,
    ffi.Pointer<wire_list_index> aabbs,
  ) {
    return _wire_bvh_new_async(
      port_,
      aabbs,
    );
  }

  late final _wire_bvh_new_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_list_index>)>>('wire_bvh_new_async');
  late final _wire_bvh_new_async = _wire_bvh_new_asyncPtr
      .asFunction<void Function(int, ffi.Pointer<wire_list_index>)>();

  WireSyncReturn wire_bvh_drop(
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_drop(
      bvh_id,
    );
  }

  late final _wire_bvh_dropPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_bvh_drop');
  late final _wire_bvh_drop = _wire_bvh_dropPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_bvh_flatten(
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_flatten(
      bvh_id,
    );
  }

  late final _wire_bvh_flattenPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_bvh_flatten');
  late final _wire_bvh_flatten = _wire_bvh_flattenPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  void wire_bvh_flatten_async(
    int port_,
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_flatten_async(
      port_,
      bvh_id,
    );
  }

  late final _wire_bvh_flatten_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Index>)>>('wire_bvh_flatten_async');
  late final _wire_bvh_flatten_async = _wire_bvh_flatten_asyncPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_bvh_depth(
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_depth(
      bvh_id,
    );
  }

  late final _wire_bvh_depthPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_bvh_depth');
  late final _wire_bvh_depth = _wire_bvh_depthPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  void wire_bvh_depth_async(
    int port_,
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_depth_async(
      port_,
      bvh_id,
    );
  }

  late final _wire_bvh_depth_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Index>)>>('wire_bvh_depth_async');
  late final _wire_bvh_depth_async = _wire_bvh_depth_asyncPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_bvh_query_aabb_collisions(
    ffi.Pointer<wire_Index> bvh_id,
    ffi.Pointer<wire_Index> aabb_id,
  ) {
    return _wire_bvh_query_aabb_collisions(
      bvh_id,
      aabb_id,
    );
  }

  late final _wire_bvh_query_aabb_collisionsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Index>,
              ffi.Pointer<wire_Index>)>>('wire_bvh_query_aabb_collisions');
  late final _wire_bvh_query_aabb_collisions =
      _wire_bvh_query_aabb_collisionsPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Index>, ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_bvh_query_aabb_collisions_min_max(
    ffi.Pointer<wire_Index> bvh_id,
    double min_x,
    double min_y,
    double max_x,
    double max_y,
  ) {
    return _wire_bvh_query_aabb_collisions_min_max(
      bvh_id,
      min_x,
      min_y,
      max_x,
      max_y,
    );
  }

  late final _wire_bvh_query_aabb_collisions_min_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Index>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('wire_bvh_query_aabb_collisions_min_max');
  late final _wire_bvh_query_aabb_collisions_min_max =
      _wire_bvh_query_aabb_collisions_min_maxPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Index>, double, double, double, double)>();

  WireSyncReturn wire_bvh_query_point_collisions(
    ffi.Pointer<wire_Index> bvh_id,
    double x,
    double y,
  ) {
    return _wire_bvh_query_point_collisions(
      bvh_id,
      x,
      y,
    );
  }

  late final _wire_bvh_query_point_collisionsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Index>, ffi.Double,
              ffi.Double)>>('wire_bvh_query_point_collisions');
  late final _wire_bvh_query_point_collisions =
      _wire_bvh_query_point_collisionsPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Index>, double, double)>();

  WireSyncReturn wire_bvh_print(
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_print(
      bvh_id,
    );
  }

  late final _wire_bvh_printPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_bvh_print');
  late final _wire_bvh_print = _wire_bvh_printPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  void wire_bvh_print_async(
    int port_,
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_print_async(
      port_,
      bvh_id,
    );
  }

  late final _wire_bvh_print_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Index>)>>('wire_bvh_print_async');
  late final _wire_bvh_print_async = _wire_bvh_print_asyncPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Index>)>();

  WireSyncReturn wire_bvh_overlap_ratio(
    ffi.Pointer<wire_Index> bvh_id,
  ) {
    return _wire_bvh_overlap_ratio(
      bvh_id,
    );
  }

  late final _wire_bvh_overlap_ratioPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>>(
      'wire_bvh_overlap_ratio');
  late final _wire_bvh_overlap_ratio = _wire_bvh_overlap_ratioPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Index>)>();

  ffi.Pointer<wire_Index> new_box_autoadd_index_0() {
    return _new_box_autoadd_index_0();
  }

  late final _new_box_autoadd_index_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Index> Function()>>(
          'new_box_autoadd_index_0');
  late final _new_box_autoadd_index_0 = _new_box_autoadd_index_0Ptr
      .asFunction<ffi.Pointer<wire_Index> Function()>();

  ffi.Pointer<wire_float_64_list> new_float_64_list_0(
    int len,
  ) {
    return _new_float_64_list_0(
      len,
    );
  }

  late final _new_float_64_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_float_64_list> Function(
              ffi.Int32)>>('new_float_64_list_0');
  late final _new_float_64_list_0 = _new_float_64_list_0Ptr
      .asFunction<ffi.Pointer<wire_float_64_list> Function(int)>();

  ffi.Pointer<wire_list_index> new_list_index_0(
    int len,
  ) {
    return _new_list_index_0(
      len,
    );
  }

  late final _new_list_index_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_list_index> Function(ffi.Int32)>>(
      'new_list_index_0');
  late final _new_list_index_0 = _new_list_index_0Ptr
      .asFunction<ffi.Pointer<wire_list_index> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_float_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Index extends ffi.Struct {
  @ffi.UintPtr()
  external int index;

  @ffi.Uint64()
  external int generation;
}

class wire_list_index extends ffi.Struct {
  external ffi.Pointer<wire_Index> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;

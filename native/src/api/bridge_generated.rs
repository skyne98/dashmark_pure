#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.1.

use crate::api::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::api::shape::Shape;
use crate::api::shape::ShapeTransform;
use crate::index::GenerationalIndex;

// Section: wire functions

fn wire_say_hello_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "say_hello",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(say_hello()),
    )
}
fn wire_update_impl(dt: impl Wire2Api<f64> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "update",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_dt = dt.wire2api();
            Ok(update(api_dt))
        },
    )
}
fn wire_create_entity_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "create_entity",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(create_entity()),
    )
}
fn wire_drop_entity_impl(
    index: impl Wire2Api<GenerationalIndex> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "drop_entity",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_index = index.wire2api();
            Ok(drop_entity(api_index))
        },
    )
}
fn wire_entities_set_position_raw_impl(
    indices: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
    positions: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entities_set_position_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_indices = indices.wire2api();
            let api_positions = positions.wire2api();
            Ok(entities_set_position_raw(api_indices, api_positions))
        },
    )
}
fn wire_entities_set_origin_raw_impl(
    indices: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
    origins: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entities_set_origin_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_indices = indices.wire2api();
            let api_origins = origins.wire2api();
            Ok(entities_set_origin_raw(api_indices, api_origins))
        },
    )
}
fn wire_entities_set_rotation_raw_impl(
    indices: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
    rotations: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entities_set_rotation_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_indices = indices.wire2api();
            let api_rotations = rotations.wire2api();
            Ok(entities_set_rotation_raw(api_indices, api_rotations))
        },
    )
}
fn wire_entities_set_scale_raw_impl(
    indices: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
    scales: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entities_set_scale_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_indices = indices.wire2api();
            let api_scales = scales.wire2api();
            Ok(entities_set_scale_raw(api_indices, api_scales))
        },
    )
}
fn wire_query_aabb_impl(
    x: impl Wire2Api<f64> + UnwindSafe,
    y: impl Wire2Api<f64> + UnwindSafe,
    width: impl Wire2Api<f64> + UnwindSafe,
    height: impl Wire2Api<f64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "query_aabb",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_x = x.wire2api();
            let api_y = y.wire2api();
            let api_width = width.wire2api();
            let api_height = height.wire2api();
            Ok(query_aabb(api_x, api_y, api_width, api_height))
        },
    )
}
fn wire_query_aabb_raw_impl(
    x: impl Wire2Api<f64> + UnwindSafe,
    y: impl Wire2Api<f64> + UnwindSafe,
    width: impl Wire2Api<f64> + UnwindSafe,
    height: impl Wire2Api<f64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "query_aabb_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_x = x.wire2api();
            let api_y = y.wire2api();
            let api_width = width.wire2api();
            let api_height = height.wire2api();
            Ok(query_aabb_raw(api_x, api_y, api_width, api_height))
        },
    )
}
fn wire_entity_set_vertices_raw_impl(
    index: impl Wire2Api<GenerationalIndex> + UnwindSafe,
    vertices: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entity_set_vertices_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_index = index.wire2api();
            let api_vertices = vertices.wire2api();
            Ok(entity_set_vertices_raw(api_index, api_vertices))
        },
    )
}
fn wire_entity_set_tex_coords_raw_impl(
    index: impl Wire2Api<GenerationalIndex> + UnwindSafe,
    tex_coords: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entity_set_tex_coords_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_index = index.wire2api();
            let api_tex_coords = tex_coords.wire2api();
            Ok(entity_set_tex_coords_raw(api_index, api_tex_coords))
        },
    )
}
fn wire_entity_set_indices_raw_impl(
    index: impl Wire2Api<GenerationalIndex> + UnwindSafe,
    indices: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entity_set_indices_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_index = index.wire2api();
            let api_indices = indices.wire2api();
            Ok(entity_set_indices_raw(api_index, api_indices))
        },
    )
}
fn wire_entities_set_priority_raw_impl(
    indices: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
    priorities: impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entities_set_priority_raw",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_indices = indices.wire2api();
            let api_priorities = priorities.wire2api();
            Ok(entities_set_priority_raw(api_indices, api_priorities))
        },
    )
}
fn wire_entity_set_shape_impl(
    index: impl Wire2Api<GenerationalIndex> + UnwindSafe,
    shape: impl Wire2Api<Shape> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entity_set_shape",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_index = index.wire2api();
            let api_shape = shape.wire2api();
            Ok(entity_set_shape(api_index, api_shape))
        },
    )
}
fn wire_entity_set_color_impl(
    index: impl Wire2Api<GenerationalIndex> + UnwindSafe,
    color: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "entity_set_color",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_index = index.wire2api();
            let api_color = color.wire2api();
            Ok(entity_set_color(api_index, api_color))
        },
    )
}
fn wire_batches_count_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "batches_count",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(batches_count()),
    )
}
fn wire_vertices_impl(batch_index: impl Wire2Api<u16> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "vertices",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_batch_index = batch_index.wire2api();
            Ok(vertices(api_batch_index))
        },
    )
}
fn wire_tex_coords_impl(batch_index: impl Wire2Api<u16> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "tex_coords",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_batch_index = batch_index.wire2api();
            Ok(tex_coords(api_batch_index))
        },
    )
}
fn wire_indices_impl(batch_index: impl Wire2Api<u16> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "indices",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_batch_index = batch_index.wire2api();
            Ok(indices(api_batch_index))
        },
    )
}
fn wire_colors_impl(batch_index: impl Wire2Api<u16> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "colors",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_batch_index = batch_index.wire2api();
            Ok(colors(api_batch_index))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for GenerationalIndex {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart(), self.1.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GenerationalIndex {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
